"""Add author and books

Revision ID: c366a643df6f
Revises: 9da97c395bde
Create Date: 2025-09-16 16:49:04.114789

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c366a643df6f"
down_revision: Union[str, None] = "9da97c395bde"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authors",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_authors_id"), "authors", ["id"], unique=False)
    op.create_index(op.f("ix_authors_name"), "authors", ["name"], unique=False)
    op.create_table(
        "books",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=500), nullable=False),
        sa.Column("published_year", sa.Integer(), nullable=False),
        sa.Column(
            "genre",
            postgresql.ENUM(
                "FICTION",
                "NON_FICTION",
                "SCIENCE",
                "HISTORY",
                "BIOGRAPHY",
                "FANTASY",
                "MYSTERY",
                "ROMANCE",
                "THRILLER",
                "CHILDREN",
                "POETRY",
                "PHILOSOPHY",
                "SELF_HELP",
                "TRAVEL",
                "COOKING",
                "ART",
                "RELIGION",
                "BUSINESS",
                "HEALTH",
                "TECHNOLOGY",
                name="genre_enum",
            ),
            nullable=False,
        ),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["authors.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_books_author_id"), "books", ["author_id"], unique=False)
    op.create_index(op.f("ix_books_created_at"), "books", ["created_at"], unique=False)
    op.create_index(op.f("ix_books_genre"), "books", ["genre"], unique=False)
    op.create_index(op.f("ix_books_id"), "books", ["id"], unique=False)
    op.create_index(op.f("ix_books_published_year"), "books", ["published_year"], unique=False)
    op.create_index(op.f("ix_books_title"), "books", ["title"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_books_title"), table_name="books")
    op.drop_index(op.f("ix_books_published_year"), table_name="books")
    op.drop_index(op.f("ix_books_id"), table_name="books")
    op.drop_index(op.f("ix_books_genre"), table_name="books")
    op.drop_index(op.f("ix_books_created_at"), table_name="books")
    op.drop_index(op.f("ix_books_author_id"), table_name="books")
    op.drop_table("books")
    op.drop_index(op.f("ix_authors_name"), table_name="authors")
    op.drop_index(op.f("ix_authors_id"), table_name="authors")
    op.drop_table("authors")
    # ### end Alembic commands ###
